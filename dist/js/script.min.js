"use strict";const romanNumerals=["I","II","III","IV","V","VI","VII","VIII","IX","X","XI","XII","XIII","XIV","XV","XVI","XVII","XVIII","XIX","XX"],dashboards=[{title:"Northwind Traders",desc:"A top-level KPI dashboard made to help Northwind Traders' executives quickly understand the company's performance in key areas.",img:{src:"./img/dashboard-2.png",alt:"KPI Dashboard for Northwind Traders"}},{title:"Airline Passengers Satisfaction",desc:"Report based on passenger survey results prepared to recommend a data-driven strategy for an airline to increase their customer satisfaction ratings.",img:{src:"./img/dashboard-1.png",alt:""}}],dashboardCounter={actual:document.querySelector(".js-counter-actual"),ofAll:document.querySelector(".js-counter-of-all"),title:document.querySelector(".js-counter-title")},dashboardInfo={title:document.querySelector(".js-info-title"),desc:document.querySelector(".js-info-desc")},swiperWrapper=document.querySelector(".swiper-wrapper"),displayDashboards=function(e,r){var{actual:t,ofAll:a}=dashboardCounter;t.textContent=r[0],a.textContent=r[e.length-1],swiperWrapper.innerHTML="",e.forEach(e=>{var{src:e,alt:r}=e["img"],e=`
    <div class="swiper-slide carousel__slide">
    <div class="carousel__img-box">
    <img src="${e}" alt="${r}" />
    </div>
    </div>`;swiperWrapper.insertAdjacentHTML("afterbegin",e)})},swiper=(displayDashboards(dashboards,romanNumerals),new Swiper(".swiper",{loop:!0,navigation:{enabled:!1,nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},breakpoints:{768:{navigation:{enabled:!0}}},pagination:{el:".swiper-pagination",type:"progressbar",renderProgressbar:function(e){return'<span class="'+e+'"></span>'}}}));swiper.on("slideChange",function(){var{actual:e,title:r}=dashboardCounter,{title:t,desc:a}=dashboardInfo,s=swiper.realIndex;e.textContent=romanNumerals[s],r.textContent=t.textContent=dashboards[s].title,a.textContent=dashboards[s].desc});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGEuanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbInJvbWFuTnVtZXJhbHMiLCJkYXNoYm9hcmRzIiwidGl0bGUiLCJkZXNjIiwiaW1nIiwic3JjIiwiYWx0IiwiZGFzaGJvYXJkQ291bnRlciIsImFjdHVhbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm9mQWxsIiwiZGFzaGJvYXJkSW5mbyIsInN3aXBlcldyYXBwZXIiLCJkaXNwbGF5RGFzaGJvYXJkcyIsIm51bVN5cyIsInRleHRDb250ZW50IiwibGVuZ3RoIiwiaW5uZXJIVE1MIiwiZm9yRWFjaCIsImRhc2giLCJodG1sIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwic3dpcGVyIiwiU3dpcGVyIiwibG9vcCIsIm5hdmlnYXRpb24iLCJlbmFibGVkIiwibmV4dEVsIiwicHJldkVsIiwiYnJlYWtwb2ludHMiLCI3NjgiLCJwYWdpbmF0aW9uIiwiZWwiLCJ0eXBlIiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsIm9uIiwiaW5mb1RpdGxlIiwiaW5mb0Rlc2MiLCJ0YXJnZXRJbmRleCIsInJlYWxJbmRleCJdLCJtYXBwaW5ncyI6ImFBQUEsTUFBQUEsY0FBQSxDQUNBLElBQ0EsS0FDQSxNQUNBLEtBQ0EsSUFDQSxLQUNBLE1BQ0EsT0FDQSxLQUNBLElBQ0EsS0FDQSxNQUNBLE9BQ0EsTUFDQSxLQUNBLE1BQ0EsT0FDQSxRQUNBLE1BQ0EsTUFHQUMsV0FBQSxDQUNBLENBQ0FDLE1BQUEsb0JBQ0FDLEtBQUEsa0lBQ0FDLElBQUEsQ0FDQUMsSUFBQSx3QkFDQUMsSUFBQSxxQ0FDQSxDQUNBLEVBQ0EsQ0FDQUosTUFBQSxrQ0FDQUMsS0FBQSx3SkFDQUMsSUFBQSxDQUNBQyxJQUFBLHdCQUNBQyxJQUFBLEVBQ0EsQ0FDQSxHQ3JDQUMsaUJBQUEsQ0FDQUMsT0FBQUMsU0FBQUMsY0FBQSxvQkFBQSxFQUNBQyxNQUFBRixTQUFBQyxjQUFBLG9CQUFBLEVBQ0FSLE1BQUFPLFNBQUFDLGNBQUEsbUJBQUEsQ0FDQSxFQUNBRSxjQUFBLENBQ0FWLE1BQUFPLFNBQUFDLGNBQUEsZ0JBQUEsRUFDQVAsS0FBQU0sU0FBQUMsY0FBQSxlQUFBLENBQ0EsRUFDQUcsY0FBQUosU0FBQUMsY0FBQSxpQkFBQSxFQUVBSSxrQkFBQSxTQUFBYixFQUFBYyxHQUNBLEdBQUEsQ0FBQVAsT0FBQUEsRUFBQUcsTUFBQUEsQ0FBQSxFQUFBSixpQkFFQUMsRUFBQVEsWUFBQUQsRUFBQSxHQUNBSixFQUFBSyxZQUFBRCxFQUFBZCxFQUFBZ0IsT0FBQSxHQUdBSixjQUFBSyxVQUFBLEdBR0FqQixFQUFBa0IsUUFBQUMsSUFDQSxHQUNBLENBQUFmLElBQUFBLEVBQUFDLElBQUFBLENBQUEsRUFDQWMsRUFEQWhCLE9BRUFpQjs7O2dCQUdBaEIsV0FBQUM7O1lBSUFPLGNBQUFTLG1CQUFBLGFBQUFELENBQUEsQ0FDQSxDQUFBLENBQ0EsRUFPQUUsUUFMQVQsa0JBQUFiLFdBQUFELGFBQUEsRUFLQSxJQUFBd0IsT0FBQSxVQUFBLENBRUFDLEtBQUEsQ0FBQSxFQU1BQyxXQUFBLENBQ0FDLFFBQUEsQ0FBQSxFQUNBQyxPQUFBLHNCQUNBQyxPQUFBLHFCQUNBLEVBQ0FDLFlBQUEsQ0FFQUMsSUFBQSxDQUNBTCxXQUFBLENBQ0FDLFFBQUEsQ0FBQSxDQUNBLENBQ0EsQ0FDQSxFQUNBSyxXQUFBLENBQ0FDLEdBQUEscUJBQ0FDLEtBQUEsY0FDQUMsa0JBQUEsU0FBQUMsR0FDQSxNQUFBLGdCQUFBQSxFQUFBLFdBQ0EsQ0FDQSxDQUNBLENBQUEsR0FHQWIsT0FBQWMsR0FBQSxjQUFBLFdBQ0EsR0FBQSxDQUFBN0IsT0FBQUEsRUFBQU4sTUFBQUEsQ0FBQSxFQUFBSyxpQkFDQSxDQUFBTCxNQUFBb0MsRUFBQW5DLEtBQUFvQyxDQUFBLEVBQUEzQixjQUNBNEIsRUFBQWpCLE9BQUFrQixVQUVBakMsRUFBQVEsWUFBQWhCLGNBQUF3QyxHQUNBdEMsRUFBQWMsWUFBQXNCLEVBQUF0QixZQUFBZixXQUFBdUMsR0FBQXRDLE1BQ0FxQyxFQUFBdkIsWUFBQWYsV0FBQXVDLEdBQUFyQyxJQUNBLENBQUEiLCJmaWxlIjoic2NyaXB0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJvbWFuTnVtZXJhbHMgPSBbXHJcbiAgJ0knLFxyXG4gICdJSScsXHJcbiAgJ0lJSScsXHJcbiAgJ0lWJyxcclxuICAnVicsXHJcbiAgJ1ZJJyxcclxuICAnVklJJyxcclxuICAnVklJSScsXHJcbiAgJ0lYJyxcclxuICAnWCcsXHJcbiAgJ1hJJyxcclxuICAnWElJJyxcclxuICAnWElJSScsXHJcbiAgJ1hJVicsXHJcbiAgJ1hWJyxcclxuICAnWFZJJyxcclxuICAnWFZJSScsXHJcbiAgJ1hWSUlJJyxcclxuICAnWElYJyxcclxuICAnWFgnLFxyXG5dO1xyXG5cclxuY29uc3QgZGFzaGJvYXJkcyA9IFtcclxuICB7XHJcbiAgICB0aXRsZTogJ05vcnRod2luZCBUcmFkZXJzJyxcclxuICAgIGRlc2M6IFwiQSB0b3AtbGV2ZWwgS1BJIGRhc2hib2FyZCBtYWRlIHRvIGhlbHAgTm9ydGh3aW5kIFRyYWRlcnMnIGV4ZWN1dGl2ZXMgcXVpY2tseSB1bmRlcnN0YW5kIHRoZSBjb21wYW55J3MgcGVyZm9ybWFuY2UgaW4ga2V5IGFyZWFzLlwiLFxyXG4gICAgaW1nOiB7XHJcbiAgICAgIHNyYzogJy4vaW1nL2Rhc2hib2FyZC0yLnBuZycsXHJcbiAgICAgIGFsdDogJ0tQSSBEYXNoYm9hcmQgZm9yIE5vcnRod2luZCBUcmFkZXJzJyxcclxuICAgIH0sXHJcbiAgfSxcclxuICB7XHJcbiAgICB0aXRsZTogJ0FpcmxpbmUgUGFzc2VuZ2VycyBTYXRpc2ZhY3Rpb24nLFxyXG4gICAgZGVzYzogJ1JlcG9ydCBiYXNlZCBvbiBwYXNzZW5nZXIgc3VydmV5IHJlc3VsdHMgcHJlcGFyZWQgdG8gcmVjb21tZW5kIGEgZGF0YS1kcml2ZW4gc3RyYXRlZ3kgZm9yIGFuIGFpcmxpbmUgdG8gaW5jcmVhc2UgdGhlaXIgY3VzdG9tZXIgc2F0aXNmYWN0aW9uIHJhdGluZ3MuJyxcclxuICAgIGltZzoge1xyXG4gICAgICBzcmM6ICcuL2ltZy9kYXNoYm9hcmQtMS5wbmcnLFxyXG4gICAgICBhbHQ6ICcnLFxyXG4gICAgfSxcclxuICB9LFxyXG5dO1xyXG4iLCIvLyBNYWluIHNjcmlwdHMgdG8gZHluYW1pY2FsbHkgY2hhbmdlIGNvbnRlbnRcclxuLy8gRE9NIEVsZW1lbnRzXHJcbmNvbnN0IGRhc2hib2FyZENvdW50ZXIgPSB7XHJcbiAgYWN0dWFsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtY291bnRlci1hY3R1YWwnKSxcclxuICBvZkFsbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWNvdW50ZXItb2YtYWxsJyksXHJcbiAgdGl0bGU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jb3VudGVyLXRpdGxlJyksXHJcbn07XHJcbmNvbnN0IGRhc2hib2FyZEluZm8gPSB7XHJcbiAgdGl0bGU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1pbmZvLXRpdGxlJyksXHJcbiAgZGVzYzogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWluZm8tZGVzYycpLFxyXG59O1xyXG5jb25zdCBzd2lwZXJXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN3aXBlci13cmFwcGVyJyk7XHJcblxyXG5jb25zdCBkaXNwbGF5RGFzaGJvYXJkcyA9IGZ1bmN0aW9uIChkYXNoYm9hcmRzLCBudW1TeXMpIHtcclxuICBjb25zdCB7IGFjdHVhbCwgb2ZBbGwgfSA9IGRhc2hib2FyZENvdW50ZXI7XHJcblxyXG4gIGFjdHVhbC50ZXh0Q29udGVudCA9IG51bVN5c1swXTtcclxuICBvZkFsbC50ZXh0Q29udGVudCA9IG51bVN5c1tkYXNoYm9hcmRzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAvLyBDbGVhciBzd2lwZXIgY29udGFpbmVyXHJcbiAgc3dpcGVyV3JhcHBlci5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgLy9BZGQgZGFzaGJvYXJkcyB0byBzd2lwZXIgY29udGFpbmVyXHJcbiAgZGFzaGJvYXJkcy5mb3JFYWNoKChkYXNoKSA9PiB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGltZzogeyBzcmMsIGFsdCB9LFxyXG4gICAgfSA9IGRhc2g7XHJcbiAgICBjb25zdCBodG1sID0gYFxyXG4gICAgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZSBjYXJvdXNlbF9fc2xpZGVcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJjYXJvdXNlbF9faW1nLWJveFwiPlxyXG4gICAgPGltZyBzcmM9XCIke3NyY31cIiBhbHQ9XCIke2FsdH1cIiAvPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5gO1xyXG5cclxuICAgIHN3aXBlcldyYXBwZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgaHRtbCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5kaXNwbGF5RGFzaGJvYXJkcyhkYXNoYm9hcmRzLCByb21hbk51bWVyYWxzKTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBTd2lwZXIgc2V0dGluZ3NcclxuXHJcbmNvbnN0IHN3aXBlciA9IG5ldyBTd2lwZXIoJy5zd2lwZXInLCB7XHJcbiAgLy8gT3B0aW9uYWwgcGFyYW1ldGVyc1xyXG4gIGxvb3A6IHRydWUsXHJcbiAgLy8gYXV0b3BsYXk6IHtcclxuICAvLyAgIGRlbGF5OiAzMDAwLFxyXG4gIC8vIH0sXHJcblxyXG4gIC8vIE5hdmlnYXRpb24gYXJyb3dzXHJcbiAgbmF2aWdhdGlvbjoge1xyXG4gICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICBuZXh0RWw6ICcuc3dpcGVyLWJ1dHRvbi1uZXh0JyxcclxuICAgIHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYnLFxyXG4gIH0sXHJcbiAgYnJlYWtwb2ludHM6IHtcclxuICAgIC8vIHdoZW4gd2luZG93IHdpZHRoIGlzID49IDMyMHB4XHJcbiAgICA3Njg6IHtcclxuICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgcGFnaW5hdGlvbjoge1xyXG4gICAgZWw6ICcuc3dpcGVyLXBhZ2luYXRpb24nLFxyXG4gICAgdHlwZTogJ3Byb2dyZXNzYmFyJyxcclxuICAgIHJlbmRlclByb2dyZXNzYmFyOiBmdW5jdGlvbiAocHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpIHtcclxuICAgICAgcmV0dXJuICc8c3BhbiBjbGFzcz1cIicgKyBwcm9ncmVzc2JhckZpbGxDbGFzcyArICdcIj48L3NwYW4+JztcclxuICAgIH0sXHJcbiAgfSxcclxufSk7XHJcblxyXG4vLyBFdmVudCBsaXN0ZW5lciBmaXJlZCB3aGVuIHNsaWRlIGNoYW5nZVxyXG5zd2lwZXIub24oJ3NsaWRlQ2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gIGNvbnN0IHsgYWN0dWFsLCB0aXRsZSB9ID0gZGFzaGJvYXJkQ291bnRlcjtcclxuICBjb25zdCB7IHRpdGxlOiBpbmZvVGl0bGUsIGRlc2M6IGluZm9EZXNjIH0gPSBkYXNoYm9hcmRJbmZvO1xyXG4gIGNvbnN0IHRhcmdldEluZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcclxuXHJcbiAgYWN0dWFsLnRleHRDb250ZW50ID0gcm9tYW5OdW1lcmFsc1t0YXJnZXRJbmRleF07XHJcbiAgdGl0bGUudGV4dENvbnRlbnQgPSBpbmZvVGl0bGUudGV4dENvbnRlbnQgPSBkYXNoYm9hcmRzW3RhcmdldEluZGV4XS50aXRsZTtcclxuICBpbmZvRGVzYy50ZXh0Q29udGVudCA9IGRhc2hib2FyZHNbdGFyZ2V0SW5kZXhdLmRlc2M7XHJcbn0pO1xyXG4iXX0=
