"use strict";const romanNumerals=["I","II","III","IV","V","VI","VII","VIII","IX","X","XI","XII","XIII","XIV","XV","XVI","XVII","XVIII","XIX","XX"],dashboards=[{title:"Northwind Traders",desc:"A top-level KPI dashboard made to help Northwind Traders' executives quickly understand the company's performance in key areas.",img:{src:"./img/dashboard-2.png",alt:"KPI Dashboard for Northwind Traders"}},{title:"Airline Passengers Satisfaction",desc:"Report based on passenger survey results prepared to recommend a data-driven strategy for an airline to increase their customer satisfaction ratings.",img:{src:"./img/dashboard-1.png",alt:""}}],dashboardCounter={actual:document.querySelector(".js-counter-actual"),ofAll:document.querySelector(".js-counter-of-all"),title:document.querySelector(".js-counter-title")},dashboardInfo={title:document.querySelector(".js-info-title"),desc:document.querySelector(".js-info-desc")},swiperWrapper=document.querySelector(".swiper-wrapper"),displayDashboards=function(e,r){var{actual:t,ofAll:a}=dashboardCounter;t.textContent=r[0],a.textContent=r[e.length-1],swiperWrapper.innerHTML="",e.forEach(e=>{var{src:e,alt:r}=e["img"],e=`
    <div class="swiper-slide carousel__slide">
    <div class="carousel__img-box">
    <img src="${e}" alt="${r}" />
    </div>
    </div>`;swiperWrapper.insertAdjacentHTML("afterbegin",e)})},swiper=(displayDashboards(dashboards,romanNumerals),new Swiper(".swiper",{loop:!0,navigation:{enabled:!1,nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},breakpoints:{768:{navigation:{enabled:!0}}},pagination:{el:".swiper-pagination",type:"progressbar",renderProgressbar:function(e){return'<span class="'+e+'"></span>'}}})),gif=(swiper.on("slideChange",function(){var{actual:e,title:r}=dashboardCounter,{title:t,desc:a}=dashboardInfo,s=swiper.realIndex;e.textContent=romanNumerals[s],r.textContent=t.textContent=dashboards[s].title,a.textContent=dashboards[s].desc}),document.querySelector(".js-gif"));setTimeout(()=>gif.src="./img/arrow-gif.png",3e3);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGEuanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbInJvbWFuTnVtZXJhbHMiLCJkYXNoYm9hcmRzIiwidGl0bGUiLCJkZXNjIiwiaW1nIiwic3JjIiwiYWx0IiwiZGFzaGJvYXJkQ291bnRlciIsImFjdHVhbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm9mQWxsIiwiZGFzaGJvYXJkSW5mbyIsInN3aXBlcldyYXBwZXIiLCJkaXNwbGF5RGFzaGJvYXJkcyIsIm51bVN5cyIsInRleHRDb250ZW50IiwibGVuZ3RoIiwiaW5uZXJIVE1MIiwiZm9yRWFjaCIsImRhc2giLCJodG1sIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwic3dpcGVyIiwiU3dpcGVyIiwibG9vcCIsIm5hdmlnYXRpb24iLCJlbmFibGVkIiwibmV4dEVsIiwicHJldkVsIiwiYnJlYWtwb2ludHMiLCI3NjgiLCJwYWdpbmF0aW9uIiwiZWwiLCJ0eXBlIiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsImdpZiIsIm9uIiwiaW5mb1RpdGxlIiwiaW5mb0Rlc2MiLCJ0YXJnZXRJbmRleCIsInJlYWxJbmRleCIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiJhQUFBLE1BQUFBLGNBQUEsQ0FDQSxJQUNBLEtBQ0EsTUFDQSxLQUNBLElBQ0EsS0FDQSxNQUNBLE9BQ0EsS0FDQSxJQUNBLEtBQ0EsTUFDQSxPQUNBLE1BQ0EsS0FDQSxNQUNBLE9BQ0EsUUFDQSxNQUNBLE1BR0FDLFdBQUEsQ0FDQSxDQUNBQyxNQUFBLG9CQUNBQyxLQUFBLGtJQUNBQyxJQUFBLENBQ0FDLElBQUEsd0JBQ0FDLElBQUEscUNBQ0EsQ0FDQSxFQUNBLENBQ0FKLE1BQUEsa0NBQ0FDLEtBQUEsd0pBQ0FDLElBQUEsQ0FDQUMsSUFBQSx3QkFDQUMsSUFBQSxFQUNBLENBQ0EsR0NyQ0FDLGlCQUFBLENBQ0FDLE9BQUFDLFNBQUFDLGNBQUEsb0JBQUEsRUFDQUMsTUFBQUYsU0FBQUMsY0FBQSxvQkFBQSxFQUNBUixNQUFBTyxTQUFBQyxjQUFBLG1CQUFBLENBQ0EsRUFDQUUsY0FBQSxDQUNBVixNQUFBTyxTQUFBQyxjQUFBLGdCQUFBLEVBQ0FQLEtBQUFNLFNBQUFDLGNBQUEsZUFBQSxDQUNBLEVBQ0FHLGNBQUFKLFNBQUFDLGNBQUEsaUJBQUEsRUFFQUksa0JBQUEsU0FBQWIsRUFBQWMsR0FDQSxHQUFBLENBQUFQLE9BQUFBLEVBQUFHLE1BQUFBLENBQUEsRUFBQUosaUJBRUFDLEVBQUFRLFlBQUFELEVBQUEsR0FDQUosRUFBQUssWUFBQUQsRUFBQWQsRUFBQWdCLE9BQUEsR0FHQUosY0FBQUssVUFBQSxHQUdBakIsRUFBQWtCLFFBQUFDLElBQ0EsR0FDQSxDQUFBZixJQUFBQSxFQUFBQyxJQUFBQSxDQUFBLEVBQ0FjLEVBREFoQixPQUVBaUI7OztnQkFHQWhCLFdBQUFDOztZQUlBTyxjQUFBUyxtQkFBQSxhQUFBRCxDQUFBLENBQ0EsQ0FBQSxDQUNBLEVBT0FFLFFBTEFULGtCQUFBYixXQUFBRCxhQUFBLEVBS0EsSUFBQXdCLE9BQUEsVUFBQSxDQUVBQyxLQUFBLENBQUEsRUFNQUMsV0FBQSxDQUNBQyxRQUFBLENBQUEsRUFDQUMsT0FBQSxzQkFDQUMsT0FBQSxxQkFDQSxFQUNBQyxZQUFBLENBRUFDLElBQUEsQ0FDQUwsV0FBQSxDQUNBQyxRQUFBLENBQUEsQ0FDQSxDQUNBLENBQ0EsRUFDQUssV0FBQSxDQUNBQyxHQUFBLHFCQUNBQyxLQUFBLGNBQ0FDLGtCQUFBLFNBQUFDLEdBQ0EsTUFBQSxnQkFBQUEsRUFBQSxXQUNBLENBQ0EsQ0FDQSxDQUFBLEdBZUFDLEtBWkFkLE9BQUFlLEdBQUEsY0FBQSxXQUNBLEdBQUEsQ0FBQTlCLE9BQUFBLEVBQUFOLE1BQUFBLENBQUEsRUFBQUssaUJBQ0EsQ0FBQUwsTUFBQXFDLEVBQUFwQyxLQUFBcUMsQ0FBQSxFQUFBNUIsY0FDQTZCLEVBQUFsQixPQUFBbUIsVUFFQWxDLEVBQUFRLFlBQUFoQixjQUFBeUMsR0FDQXZDLEVBQUFjLFlBQUF1QixFQUFBdkIsWUFBQWYsV0FBQXdDLEdBQUF2QyxNQUNBc0MsRUFBQXhCLFlBQUFmLFdBQUF3QyxHQUFBdEMsSUFDQSxDQUFBLEVBSUFNLFNBQUFDLGNBQUEsU0FBQSxHQUNBaUMsV0FBQSxJQUFBTixJQUFBaEMsSUFBQSxzQkFBQSxHQUFBIiwiZmlsZSI6InNjcmlwdC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByb21hbk51bWVyYWxzID0gW1xyXG4gICdJJyxcclxuICAnSUknLFxyXG4gICdJSUknLFxyXG4gICdJVicsXHJcbiAgJ1YnLFxyXG4gICdWSScsXHJcbiAgJ1ZJSScsXHJcbiAgJ1ZJSUknLFxyXG4gICdJWCcsXHJcbiAgJ1gnLFxyXG4gICdYSScsXHJcbiAgJ1hJSScsXHJcbiAgJ1hJSUknLFxyXG4gICdYSVYnLFxyXG4gICdYVicsXHJcbiAgJ1hWSScsXHJcbiAgJ1hWSUknLFxyXG4gICdYVklJSScsXHJcbiAgJ1hJWCcsXHJcbiAgJ1hYJyxcclxuXTtcclxuXHJcbmNvbnN0IGRhc2hib2FyZHMgPSBbXHJcbiAge1xyXG4gICAgdGl0bGU6ICdOb3J0aHdpbmQgVHJhZGVycycsXHJcbiAgICBkZXNjOiBcIkEgdG9wLWxldmVsIEtQSSBkYXNoYm9hcmQgbWFkZSB0byBoZWxwIE5vcnRod2luZCBUcmFkZXJzJyBleGVjdXRpdmVzIHF1aWNrbHkgdW5kZXJzdGFuZCB0aGUgY29tcGFueSdzIHBlcmZvcm1hbmNlIGluIGtleSBhcmVhcy5cIixcclxuICAgIGltZzoge1xyXG4gICAgICBzcmM6ICcuL2ltZy9kYXNoYm9hcmQtMi5wbmcnLFxyXG4gICAgICBhbHQ6ICdLUEkgRGFzaGJvYXJkIGZvciBOb3J0aHdpbmQgVHJhZGVycycsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGl0bGU6ICdBaXJsaW5lIFBhc3NlbmdlcnMgU2F0aXNmYWN0aW9uJyxcclxuICAgIGRlc2M6ICdSZXBvcnQgYmFzZWQgb24gcGFzc2VuZ2VyIHN1cnZleSByZXN1bHRzIHByZXBhcmVkIHRvIHJlY29tbWVuZCBhIGRhdGEtZHJpdmVuIHN0cmF0ZWd5IGZvciBhbiBhaXJsaW5lIHRvIGluY3JlYXNlIHRoZWlyIGN1c3RvbWVyIHNhdGlzZmFjdGlvbiByYXRpbmdzLicsXHJcbiAgICBpbWc6IHtcclxuICAgICAgc3JjOiAnLi9pbWcvZGFzaGJvYXJkLTEucG5nJyxcclxuICAgICAgYWx0OiAnJyxcclxuICAgIH0sXHJcbiAgfSxcclxuXTtcclxuIiwiLy8gTWFpbiBzY3JpcHRzIHRvIGR5bmFtaWNhbGx5IGNoYW5nZSBjb250ZW50XHJcbi8vIERPTSBFbGVtZW50c1xyXG5jb25zdCBkYXNoYm9hcmRDb3VudGVyID0ge1xyXG4gIGFjdHVhbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWNvdW50ZXItYWN0dWFsJyksXHJcbiAgb2ZBbGw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jb3VudGVyLW9mLWFsbCcpLFxyXG4gIHRpdGxlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtY291bnRlci10aXRsZScpLFxyXG59O1xyXG5jb25zdCBkYXNoYm9hcmRJbmZvID0ge1xyXG4gIHRpdGxlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaW5mby10aXRsZScpLFxyXG4gIGRlc2M6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1pbmZvLWRlc2MnKSxcclxufTtcclxuY29uc3Qgc3dpcGVyV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItd3JhcHBlcicpO1xyXG5cclxuY29uc3QgZGlzcGxheURhc2hib2FyZHMgPSBmdW5jdGlvbiAoZGFzaGJvYXJkcywgbnVtU3lzKSB7XHJcbiAgY29uc3QgeyBhY3R1YWwsIG9mQWxsIH0gPSBkYXNoYm9hcmRDb3VudGVyO1xyXG5cclxuICBhY3R1YWwudGV4dENvbnRlbnQgPSBudW1TeXNbMF07XHJcbiAgb2ZBbGwudGV4dENvbnRlbnQgPSBudW1TeXNbZGFzaGJvYXJkcy5sZW5ndGggLSAxXTtcclxuXHJcbiAgLy8gQ2xlYXIgc3dpcGVyIGNvbnRhaW5lclxyXG4gIHN3aXBlcldyYXBwZXIuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gIC8vQWRkIGRhc2hib2FyZHMgdG8gc3dpcGVyIGNvbnRhaW5lclxyXG4gIGRhc2hib2FyZHMuZm9yRWFjaCgoZGFzaCkgPT4ge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBpbWc6IHsgc3JjLCBhbHQgfSxcclxuICAgIH0gPSBkYXNoO1xyXG4gICAgY29uc3QgaHRtbCA9IGBcclxuICAgIDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUgY2Fyb3VzZWxfX3NsaWRlXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY2Fyb3VzZWxfX2ltZy1ib3hcIj5cclxuICAgIDxpbWcgc3JjPVwiJHtzcmN9XCIgYWx0PVwiJHthbHR9XCIgLz5cclxuICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YDtcclxuXHJcbiAgICBzd2lwZXJXcmFwcGVyLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGh0bWwpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuZGlzcGxheURhc2hib2FyZHMoZGFzaGJvYXJkcywgcm9tYW5OdW1lcmFscyk7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gU3dpcGVyIHNldHRpbmdzXHJcblxyXG5jb25zdCBzd2lwZXIgPSBuZXcgU3dpcGVyKCcuc3dpcGVyJywge1xyXG4gIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuICBsb29wOiB0cnVlLFxyXG4gIC8vIGF1dG9wbGF5OiB7XHJcbiAgLy8gICBkZWxheTogMzAwMCxcclxuICAvLyB9LFxyXG5cclxuICAvLyBOYXZpZ2F0aW9uIGFycm93c1xyXG4gIG5hdmlnYXRpb246IHtcclxuICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgbmV4dEVsOiAnLnN3aXBlci1idXR0b24tbmV4dCcsXHJcbiAgICBwcmV2RWw6ICcuc3dpcGVyLWJ1dHRvbi1wcmV2JyxcclxuICB9LFxyXG4gIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSAzMjBweFxyXG4gICAgNzY4OiB7XHJcbiAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHBhZ2luYXRpb246IHtcclxuICAgIGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJyxcclxuICAgIHR5cGU6ICdwcm9ncmVzc2JhcicsXHJcbiAgICByZW5kZXJQcm9ncmVzc2JhcjogZnVuY3Rpb24gKHByb2dyZXNzYmFyRmlsbENsYXNzKSB7XHJcbiAgICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCInICsgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3MgKyAnXCI+PC9zcGFuPic7XHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuLy8gRXZlbnQgbGlzdGVuZXIgZmlyZWQgd2hlbiBzbGlkZSBjaGFuZ2Vcclxuc3dpcGVyLm9uKCdzbGlkZUNoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICBjb25zdCB7IGFjdHVhbCwgdGl0bGUgfSA9IGRhc2hib2FyZENvdW50ZXI7XHJcbiAgY29uc3QgeyB0aXRsZTogaW5mb1RpdGxlLCBkZXNjOiBpbmZvRGVzYyB9ID0gZGFzaGJvYXJkSW5mbztcclxuICBjb25zdCB0YXJnZXRJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XHJcblxyXG4gIGFjdHVhbC50ZXh0Q29udGVudCA9IHJvbWFuTnVtZXJhbHNbdGFyZ2V0SW5kZXhdO1xyXG4gIHRpdGxlLnRleHRDb250ZW50ID0gaW5mb1RpdGxlLnRleHRDb250ZW50ID0gZGFzaGJvYXJkc1t0YXJnZXRJbmRleF0udGl0bGU7XHJcbiAgaW5mb0Rlc2MudGV4dENvbnRlbnQgPSBkYXNoYm9hcmRzW3RhcmdldEluZGV4XS5kZXNjO1xyXG59KTtcclxuXHJcbi8vIEdJRiBIYW5kbGVyXHJcblxyXG5jb25zdCBnaWYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZ2lmJyk7XHJcbnNldFRpbWVvdXQoKCkgPT4gKGdpZi5zcmMgPSAnLi9pbWcvYXJyb3ctZ2lmLnBuZycpLCAzMDAwKTtcclxuIl19
